/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package ui;

import java.awt.Color;
import javafiles.Customer;
import javafiles.CustomerDAO;
import java.sql.SQLException;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author 1886519
 */
public class SakilaUI extends javax.swing.JFrame {

    private final CustomerDAO dao;

    /**
     * Creates new form SakilaUI
     */
    public SakilaUI() throws SQLException {
        initComponents();
        setLocationRelativeTo(null);
        this.dao = new CustomerDAO();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        Filtro = new javax.swing.ButtonGroup();
        Painel = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        voltar = new javax.swing.JButton();
        jTextField2 = new javax.swing.JTextField();
        jTextField3 = new javax.swing.JTextField();
        jTextField4 = new javax.swing.JTextField();
        jSlider1 = new javax.swing.JSlider();
        jSlider4 = new javax.swing.JSlider();
        jSlider5 = new javax.swing.JSlider();
        jLabel2 = new javax.swing.JLabel();
        jComboBox1 = new javax.swing.JComboBox<>();
        Executar = new javax.swing.JButton();
        rbAtivo = new javax.swing.JRadioButton();
        rbInativo = new javax.swing.JRadioButton();
        jLabel3 = new javax.swing.JLabel();
        rbAmbas = new javax.swing.JRadioButton();
        cbDetalhado = new javax.swing.JCheckBox();
        jSeparator1 = new javax.swing.JSeparator();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        Painel.setBackground(new java.awt.Color(51, 51, 255));

        jLabel1.setFont(new java.awt.Font("Segoe UI", 1, 36)); // NOI18N
        jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel1.setText("Sakila CRUD");

        jTable1.setBackground(java.awt.Color.white);
        jTable1.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "customer_id", "store_id", "first_name", "last_name", "email", "address_id", "active", "create_date", "last_update"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Integer.class, java.lang.Integer.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.Integer.class, java.lang.Integer.class, java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jTable1.getTableHeader().setReorderingAllowed(false);
        jScrollPane1.setViewportView(jTable1);

        voltar.setBackground(new java.awt.Color(255, 255, 255));
        voltar.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        voltar.setForeground(new java.awt.Color(0, 0, 0));
        voltar.setText("<--- VOLTAR");
        voltar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                voltarActionPerformed(evt);
            }
        });

        jTextField2.setEnabled(false);
        jTextField2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTextField2ActionPerformed(evt);
            }
        });

        jTextField3.setEnabled(false);

        jTextField4.setEnabled(false);

        jSlider1.setMajorTickSpacing(50);
        jSlider1.setMaximum(255);
        jSlider1.setMinorTickSpacing(10);
        jSlider1.setPaintLabels(true);
        jSlider1.setPaintTicks(true);
        jSlider1.setValue(0);
        jSlider1.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                jSlider1StateChanged(evt);
            }
        });

        jSlider4.setMajorTickSpacing(50);
        jSlider4.setMaximum(255);
        jSlider4.setMinorTickSpacing(10);
        jSlider4.setPaintLabels(true);
        jSlider4.setPaintTicks(true);
        jSlider4.setValue(0);
        jSlider4.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        jSlider4.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                jSlider4StateChanged(evt);
            }
        });

        jSlider5.setMajorTickSpacing(50);
        jSlider5.setMaximum(255);
        jSlider5.setMinorTickSpacing(10);
        jSlider5.setPaintLabels(true);
        jSlider5.setPaintTicks(true);
        jSlider5.setValue(0);
        jSlider5.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                jSlider5StateChanged(evt);
            }
        });

        jLabel2.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        jLabel2.setText("MUDAR A COR DA INTERFACE");

        jComboBox1.setBackground(new java.awt.Color(255, 255, 255));
        jComboBox1.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        jComboBox1.setForeground(new java.awt.Color(0, 0, 0));
        jComboBox1.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "VIEW", "INSERT", "DELETE", "UPDATE" }));

        Executar.setBackground(java.awt.Color.white);
        Executar.setFont(new java.awt.Font("Segoe UI", 1, 36)); // NOI18N
        Executar.setForeground(new java.awt.Color(0, 0, 0));
        Executar.setText("EXECUTAR");
        Executar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ExecutarActionPerformed(evt);
            }
        });

        Filtro.add(rbAtivo);
        rbAtivo.setText("Ativo");

        Filtro.add(rbInativo);
        rbInativo.setText("Inativo");

        jLabel3.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        jLabel3.setText("Filtrar por:");

        Filtro.add(rbAmbas);
        rbAmbas.setText("Ambas");

        cbDetalhado.setText("Tabela detalhada");

        jSeparator1.setBackground(new java.awt.Color(255, 255, 255));
        jSeparator1.setForeground(new java.awt.Color(255, 255, 255));

        javax.swing.GroupLayout PainelLayout = new javax.swing.GroupLayout(Painel);
        Painel.setLayout(PainelLayout);
        PainelLayout.setHorizontalGroup(
            PainelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(PainelLayout.createSequentialGroup()
                .addGroup(PainelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(PainelLayout.createSequentialGroup()
                        .addGap(29, 29, 29)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 946, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, PainelLayout.createSequentialGroup()
                        .addGap(23, 23, 23)
                        .addComponent(voltar, javax.swing.GroupLayout.PREFERRED_SIZE, 122, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(265, 265, 265)
                        .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 556, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(38, 38, 38)
                .addGroup(PainelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 128, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(PainelLayout.createSequentialGroup()
                        .addGroup(PainelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jSlider1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jSlider5, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jSlider4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(PainelLayout.createSequentialGroup()
                                .addComponent(jTextField2, javax.swing.GroupLayout.PREFERRED_SIZE, 88, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(88, 88, 88))
                            .addGroup(PainelLayout.createSequentialGroup()
                                .addComponent(jTextField4, javax.swing.GroupLayout.PREFERRED_SIZE, 87, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(89, 89, 89))
                            .addGroup(PainelLayout.createSequentialGroup()
                                .addComponent(jTextField3, javax.swing.GroupLayout.PREFERRED_SIZE, 87, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(87, 87, 87))
                            .addGroup(PainelLayout.createSequentialGroup()
                                .addComponent(jLabel2)
                                .addGap(5, 5, 5))
                            .addGroup(PainelLayout.createSequentialGroup()
                                .addComponent(rbAtivo, javax.swing.GroupLayout.PREFERRED_SIZE, 98, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(rbInativo, javax.swing.GroupLayout.PREFERRED_SIZE, 98, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(rbAmbas, javax.swing.GroupLayout.PREFERRED_SIZE, 98, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addComponent(jSeparator1)
            .addGroup(PainelLayout.createSequentialGroup()
                .addGroup(PainelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(PainelLayout.createSequentialGroup()
                        .addGap(376, 376, 376)
                        .addComponent(jComboBox1, javax.swing.GroupLayout.PREFERRED_SIZE, 127, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(38, 38, 38)
                        .addComponent(cbDetalhado))
                    .addGroup(PainelLayout.createSequentialGroup()
                        .addGap(338, 338, 338)
                        .addComponent(Executar)))
                .addGap(0, 0, Short.MAX_VALUE))
        );
        PainelLayout.setVerticalGroup(
            PainelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(PainelLayout.createSequentialGroup()
                .addGroup(PainelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(PainelLayout.createSequentialGroup()
                        .addGap(14, 14, 14)
                        .addComponent(voltar, javax.swing.GroupLayout.PREFERRED_SIZE, 44, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(22, 22, 22))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, PainelLayout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 60, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)))
                .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(PainelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(PainelLayout.createSequentialGroup()
                        .addGap(16, 16, 16)
                        .addComponent(jLabel3)
                        .addGap(18, 18, 18)
                        .addGroup(PainelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(rbAtivo)
                            .addComponent(rbInativo)
                            .addComponent(rbAmbas))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jLabel2)
                        .addGap(18, 18, 18)
                        .addComponent(jTextField2, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jSlider4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jTextField4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(jSlider1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(12, 12, 12)
                        .addComponent(jTextField3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(jSlider5, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(4, 4, 4)
                .addGroup(PainelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jComboBox1, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(cbDetalhado))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 12, Short.MAX_VALUE)
                .addComponent(Executar)
                .addContainerGap())
        );

        jTextField2.setText(jSlider1.getValue()+"");
        jTextField2.setText(jSlider1.getValue()+"");
        jTextField2.setText(jSlider1.getValue()+"");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(Painel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(Painel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void voltarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_voltarActionPerformed
        index volta = new index();
        volta.setVisible(true);
        this.dispose();
    }//GEN-LAST:event_voltarActionPerformed

    private void jTextField2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTextField2ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jTextField2ActionPerformed

    private void jSlider1StateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_jSlider1StateChanged
        RGB();
        jTextField4.setText(jSlider1.getValue() + "");
    }//GEN-LAST:event_jSlider1StateChanged

    private void jSlider4StateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_jSlider4StateChanged
        RGB();
        jTextField2.setText(jSlider4.getValue() + "");
    }//GEN-LAST:event_jSlider4StateChanged

    private void jSlider5StateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_jSlider5StateChanged
        RGB();
        jTextField3.setText(jSlider5.getValue() + "");
    }//GEN-LAST:event_jSlider5StateChanged

    private void ExecutarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ExecutarActionPerformed
        Object opcao = jComboBox1.getSelectedItem();

        if (!opcao.equals("VIEW") && jTable1.getRowCount() == 0) {
            JOptionPane.showMessageDialog(null,
                    "A tabela não está carregada. Por favor, clique em VIEW primeiro.",
                    "Erro",
                    JOptionPane.ERROR_MESSAGE);
            return;
        }

        if (opcao.equals("VIEW")) {
            VIEW();
        } else if (opcao.equals("INSERT")) {

            if (jTable1.getRowCount() == 0) {
                JOptionPane.showMessageDialog(null,
                        "A tabela não está carregada. Por favor, clique em VIEW primeiro.",
                        "Erro",
                        JOptionPane.ERROR_MESSAGE);
                return;
            }
            try {

                String storeIdStr = JOptionPane.showInputDialog("Informe o store_id:");
                if (storeIdStr == null || storeIdStr.trim().isEmpty()) {
                    JOptionPane.showMessageDialog(null, "O campo store_id é obrigatório.", "Erro", JOptionPane.ERROR_MESSAGE);
                    return;
                }
                int store_id = Integer.parseInt(storeIdStr);

                String firstName = JOptionPane.showInputDialog("Informe o first_name:");
                if (firstName == null || firstName.trim().isEmpty()) {
                    JOptionPane.showMessageDialog(null, "O campo first_name é obrigatório.", "Erro", JOptionPane.ERROR_MESSAGE);
                    return;
                }
                String lastName = JOptionPane.showInputDialog("Informe o last_name:");
                if (lastName == null || lastName.trim().isEmpty()) {
                    JOptionPane.showMessageDialog(null, "O campo last_name é obrigatório.", "Erro", JOptionPane.ERROR_MESSAGE);
                    return;
                }
                String email = JOptionPane.showInputDialog("Informe o email:");
                if (email == null || email.trim().isEmpty()) {
                    JOptionPane.showMessageDialog(null, "O campo email é obrigatório.", "Erro", JOptionPane.ERROR_MESSAGE);
                    return;
                }

                String addressIdStr = JOptionPane.showInputDialog("Informe o address_id:");
                if (addressIdStr == null || addressIdStr.trim().isEmpty()) {
                    JOptionPane.showMessageDialog(null, "O campo address_id é obrigatório.", "Erro", JOptionPane.ERROR_MESSAGE);
                    return;
                }
                int address_id = Integer.parseInt(addressIdStr);

                String activeStr = JOptionPane.showInputDialog("Informe o active (0 ou 1):");
                if (activeStr == null || activeStr.trim().isEmpty()) {
                    JOptionPane.showMessageDialog(null, "O campo active é obrigatório.", "Erro", JOptionPane.ERROR_MESSAGE);
                    return;
                }
                int active = Integer.parseInt(activeStr);

                Customer newCustomer = new Customer(store_id, firstName, lastName, email, address_id, active);

                dao.insertCustomer(newCustomer);
                JOptionPane.showMessageDialog(null, "Insert realizado com sucesso!");

                VIEW();
            } catch (SQLException ex) {
                Logger.getLogger(SakilaUI.class.getName()).log(Level.SEVERE, null, ex);
                JOptionPane.showMessageDialog(null, "Erro ao realizar insert: " + ex.getMessage(), "Erro", JOptionPane.ERROR_MESSAGE);
            } catch (NumberFormatException ex) {
                JOptionPane.showMessageDialog(null, "Formato numérico inválido: " + ex.getMessage(), "Erro", JOptionPane.ERROR_MESSAGE);
            }
        } else if (opcao.equals("UPDATE")) {

            if (jTable1.getRowCount() == 0) {
                JOptionPane.showMessageDialog(null,
                        "A tabela não está carregada. Por favor, clique em VIEW primeiro.",
                        "Erro",
                        JOptionPane.ERROR_MESSAGE);
                return;
            }
            int selectedRow = jTable1.getSelectedRow();
            if (selectedRow == -1) {
                JOptionPane.showMessageDialog(null, "Selecione um registro para atualizar!", "Erro", JOptionPane.ERROR_MESSAGE);
                return;
            }
            try {
                String storeIdStr = JOptionPane.showInputDialog("Informe o novo store_id:");
                if (storeIdStr == null || storeIdStr.trim().isEmpty()) {
                    JOptionPane.showMessageDialog(null, "O campo store_id é obrigatório.", "Erro", JOptionPane.ERROR_MESSAGE);
                    return;
                }
                int newStoreId = Integer.parseInt(storeIdStr);

                String firstName = JOptionPane.showInputDialog("Informe o novo first_name:");
                if (firstName == null || firstName.trim().isEmpty()) {
                    JOptionPane.showMessageDialog(null, "O campo first_name é obrigatório.", "Erro", JOptionPane.ERROR_MESSAGE);
                    return;
                }
                String lastName = JOptionPane.showInputDialog("Informe o novo last_name:");
                if (lastName == null || lastName.trim().isEmpty()) {
                    JOptionPane.showMessageDialog(null, "O campo last_name é obrigatório.", "Erro", JOptionPane.ERROR_MESSAGE);
                    return;
                }
                String email = JOptionPane.showInputDialog("Informe o novo email:");
                if (email == null || email.trim().isEmpty()) {
                    JOptionPane.showMessageDialog(null, "O campo email é obrigatório.", "Erro", JOptionPane.ERROR_MESSAGE);
                    return;
                }

                String addressIdStr = JOptionPane.showInputDialog("Informe o novo address_id:");
                if (addressIdStr == null || addressIdStr.trim().isEmpty()) {
                    JOptionPane.showMessageDialog(null, "O campo address_id é obrigatório.", "Erro", JOptionPane.ERROR_MESSAGE);
                    return;
                }
                int newAddressId = Integer.parseInt(addressIdStr);

                String activeStr = JOptionPane.showInputDialog("Informe o novo active (0 ou 1):");
                if (activeStr == null || activeStr.trim().isEmpty()) {
                    JOptionPane.showMessageDialog(null, "O campo active é obrigatório.", "Erro", JOptionPane.ERROR_MESSAGE);
                    return;
                }
                int newActive = Integer.parseInt(activeStr);

                int customerId = (Integer) jTable1.getValueAt(selectedRow, 0);

                Customer updatedCustomer = new Customer(customerId, newStoreId, firstName, lastName, email, newAddressId, newActive, null, null);

                dao.updateCustomer(updatedCustomer);
                JOptionPane.showMessageDialog(null, "Registro atualizado com sucesso!");

                VIEW();
            } catch (SQLException ex) {
                Logger.getLogger(SakilaUI.class.getName()).log(Level.SEVERE, null, ex);
                JOptionPane.showMessageDialog(null, "Erro ao atualizar o registro: " + ex.getMessage(), "Erro", JOptionPane.ERROR_MESSAGE);
            } catch (NumberFormatException ex) {
                JOptionPane.showMessageDialog(null, "Formato numérico inválido: " + ex.getMessage(), "Erro", JOptionPane.ERROR_MESSAGE);
            }
        } else if (opcao.equals("DELETE")) {

            if (jTable1.getRowCount() == 0) {
                JOptionPane.showMessageDialog(null,
                        "A tabela não está carregada. Por favor, clique em VIEW primeiro.",
                        "Erro",
                        JOptionPane.ERROR_MESSAGE);
                return;
            }
            int selectedRow = jTable1.getSelectedRow();
            if (selectedRow == -1) {
                JOptionPane.showMessageDialog(null, "Selecione um registro para deletar!", "Erro", JOptionPane.ERROR_MESSAGE);
                return;
            }
            int confirm = JOptionPane.showConfirmDialog(null, "Deseja deletar o registro?", "Confirmação", JOptionPane.YES_NO_OPTION);
            if (confirm != JOptionPane.YES_OPTION) {
                return;
            }
            try {
                int customerId = (Integer) jTable1.getValueAt(selectedRow, 0);
                dao.deleteCustomer(customerId);
                JOptionPane.showMessageDialog(null, "Registro deletado com sucesso!");
                VIEW();
            } catch (SQLException ex) {
                Logger.getLogger(SakilaUI.class.getName()).log(Level.SEVERE, null, ex);
                JOptionPane.showMessageDialog(null, "Erro ao deletar o registro: " + ex.getMessage(), "Erro", JOptionPane.ERROR_MESSAGE);
            }
        }

    }//GEN-LAST:event_ExecutarActionPerformed

    public void RGB() {
        Painel.setBackground(new Color(jSlider4.getValue(), jSlider1.getValue(), jSlider5.getValue()));
    }

    public void VIEW() {
        if (!rbAtivo.isSelected() && !rbInativo.isSelected() && !rbAmbas.isSelected()) {
            JOptionPane.showMessageDialog(null,
                    "Por favor, selecione um status: Ativo, Inativo ou Ambas.",
                    "Erro",
                    JOptionPane.ERROR_MESSAGE);
            return;
        }

        try {

            DefaultTableModel dtm;
            if (cbDetalhado.isSelected()) {
                dtm = new DefaultTableModel(
                        new Object[][]{},
                        new String[]{"customer_id", "store_id", "first_name", "last_name", "email", "address_id", "active", "create_date", "last_update"}
                ) {
                    @Override
                    public boolean isCellEditable(int row, int column) {
                        return false;
                    }
                };
            } else {
                dtm = new DefaultTableModel(
                        new Object[][]{},
                        new String[]{"customer_id", "store_id", "first_name", "last_name", "email", "address_id", "active"}
                ) {
                    @Override
                    public boolean isCellEditable(int row, int column) {
                        return false;
                    }
                };
            }

            jTable1.setModel(dtm);

            List<Customer> lista = dao.getCustomers();

            for (Customer customer : lista) {
                boolean adicionar = false;
                if (rbAmbas.isSelected()) {
                    adicionar = true;
                } else if (rbAtivo.isSelected() && customer.getActive() == 1) {
                    adicionar = true;
                } else if (rbInativo.isSelected() && customer.getActive() == 0) {
                    adicionar = true;
                }

                if (adicionar) {
                    if (cbDetalhado.isSelected()) {
                        dtm.addRow(new Object[]{
                            customer.getCustomer_id(),
                            customer.getStore_id(),
                            customer.getFirst_name(),
                            customer.getLast_name(),
                            customer.getEmail(),
                            customer.getAddress_id(),
                            customer.getActive(),
                            customer.getCreate_date(),
                            customer.getLast_update()
                        });
                    } else {
                        dtm.addRow(new Object[]{
                            customer.getCustomer_id(),
                            customer.getStore_id(),
                            customer.getFirst_name(),
                            customer.getLast_name(),
                            customer.getEmail(),
                            customer.getAddress_id(),
                            customer.getActive()
                        });
                    }
                }
            }
        } catch (SQLException ex) {
            Logger.getLogger(SakilaUI.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(SakilaUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(SakilaUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(SakilaUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(SakilaUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                try {
                    new SakilaUI().setVisible(true);
                } catch (SQLException ex) {
                    Logger.getLogger(SakilaUI.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton Executar;
    private javax.swing.ButtonGroup Filtro;
    private javax.swing.JPanel Painel;
    private javax.swing.JCheckBox cbDetalhado;
    private javax.swing.JComboBox<String> jComboBox1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JSlider jSlider1;
    private javax.swing.JSlider jSlider4;
    private javax.swing.JSlider jSlider5;
    private javax.swing.JTable jTable1;
    private javax.swing.JTextField jTextField2;
    private javax.swing.JTextField jTextField3;
    private javax.swing.JTextField jTextField4;
    private javax.swing.JRadioButton rbAmbas;
    private javax.swing.JRadioButton rbAtivo;
    private javax.swing.JRadioButton rbInativo;
    private javax.swing.JButton voltar;
    // End of variables declaration//GEN-END:variables
}
